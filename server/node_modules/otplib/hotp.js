/**
 * otplib-hotp
 *
 * @author Gerald Yeo <contact@fusedthought.com>
 * @version: 6.0.3
 * @license: MIT
 **/
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var otplibCore = require('./core');

var HOTP = function () {
  function HOTP() {
    _classCallCheck(this, HOTP);

    this._options = this.defaultOptions;
  }

  _createClass(HOTP, [{
    key: 'resetOptions',
    value: function resetOptions() {
      this._options = this.defaultOptions;
      return this;
    }
  }, {
    key: 'generate',
    value: function generate(secret, counter) {
      return otplibCore.hotpToken(secret, counter, this.options);
    }
  }, {
    key: 'check',
    value: function check(token, secret, counter) {
      return otplibCore.hotpCheck(token, secret, counter, this.options);
    }
  }, {
    key: 'verify',
    value: function verify(opts) {
      if ((typeof opts === 'undefined' ? 'undefined' : _typeof(opts)) !== 'object' || opts == null) {
        return false;
      }
      return this.check(opts.token, opts.secret, opts.counter);
    }
  }, {
    key: 'defaultOptions',
    get: function get() {
      return {};
    }
  }, {
    key: 'options',
    set: function set() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (opt) {
        this._options = _extends({}, this._options, opt);
      }
    },
    get: function get() {
      return _extends({}, this._options);
    }
  }]);

  return HOTP;
}();

HOTP.prototype.HOTP = HOTP;

var index = new HOTP();

module.exports = index;