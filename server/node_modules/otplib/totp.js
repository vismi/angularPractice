/**
 * otplib-totp
 *
 * @author Gerald Yeo <contact@fusedthought.com>
 * @version: 6.0.3
 * @license: MIT
 **/
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _interopDefault(ex) {
  return ex && (typeof ex === 'undefined' ? 'undefined' : _typeof(ex)) === 'object' && 'default' in ex ? ex['default'] : ex;
}

var otplibCore = require('./core');
var hotp = _interopDefault(require('./hotp'));

var HOTP = hotp.HOTP;

var TOTP = function (_HOTP) {
  _inherits(TOTP, _HOTP);

  function TOTP() {
    _classCallCheck(this, TOTP);

    return _possibleConstructorReturn(this, (TOTP.__proto__ || Object.getPrototypeOf(TOTP)).call(this));
  }

  _createClass(TOTP, [{
    key: 'generate',
    value: function generate(secret) {
      return otplibCore.totpToken(secret, this.options);
    }
  }, {
    key: 'check',
    value: function check(token, secret) {
      return otplibCore.totpCheck(token, secret, this.options);
    }
  }, {
    key: 'verify',
    value: function verify(opts) {
      if ((typeof opts === 'undefined' ? 'undefined' : _typeof(opts)) !== 'object' || opts == null) {
        return false;
      }
      return this.check(opts.token, opts.secret);
    }
  }, {
    key: 'defaultOptions',
    get: function get() {
      return {
        epoch: null,
        step: 30
      };
    }
  }]);

  return TOTP;
}(HOTP);

TOTP.prototype.TOTP = TOTP;

var index = new TOTP();

module.exports = index;