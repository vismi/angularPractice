/**
 * otplib-authenticator
 *
 * @author Gerald Yeo <contact@fusedthought.com>
 * @version: 6.0.3
 * @license: MIT
 **/
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _interopDefault(ex) {
  return ex && (typeof ex === 'undefined' ? 'undefined' : _typeof(ex)) === 'object' && 'default' in ex ? ex['default'] : ex;
}

var totp = _interopDefault(require('./totp'));
var otplibUtils = require('./utils');
var otplibCore = require('./core');
var base32 = _interopDefault(require('thirty-two'));

function decodeKey(encodedKey) {
  return base32.decode(encodedKey).toString('hex');
}

function _check(token, secret, options) {
  return otplibCore.totpCheck(token, decodeKey(secret), options);
}

function encodeKey(secret) {
  return base32.encode(secret).toString().replace(/=/g, '');
}

var data = '{service}:{user}?secret={secret}&issuer={service}';
function _keyuri() {
  var user = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'user';
  var service = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'service';
  var secret = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  var protocol = 'otpauth://totp/';
  var value = data.replace('{user}', user).replace('{secret}', secret).replace(/{service}/g, service);
  return protocol + value;
}

function token(secret, options) {
  return otplibCore.totpToken(decodeKey(secret), options);
}

var TOTP = totp.TOTP;

var Authenticator = function (_TOTP) {
  _inherits(Authenticator, _TOTP);

  function Authenticator() {
    _classCallCheck(this, Authenticator);

    return _possibleConstructorReturn(this, (Authenticator.__proto__ || Object.getPrototypeOf(Authenticator)).call(this));
  }

  _createClass(Authenticator, [{
    key: 'encode',
    value: function encode() {
      return encodeKey.apply(undefined, arguments);
    }
  }, {
    key: 'decode',
    value: function decode() {
      return decodeKey.apply(undefined, arguments);
    }
  }, {
    key: 'keyuri',
    value: function keyuri() {
      return _keyuri.apply(undefined, arguments);
    }
  }, {
    key: 'generateSecret',
    value: function generateSecret() {
      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 20;

      if (!len) {
        return '';
      }
      var secret = otplibUtils.secretKey(len, this.options);
      return encodeKey(secret);
    }
  }, {
    key: 'generate',
    value: function generate(secret) {
      return token(secret, this.options);
    }
  }, {
    key: 'check',
    value: function check(token$$1, secret) {
      return _check(token$$1, secret, this.options);
    }
  }, {
    key: 'defaultOptions',
    get: function get() {
      return {
        encoding: 'hex',
        epoch: null,
        step: 30
      };
    }
  }]);

  return Authenticator;
}(TOTP);

Authenticator.prototype.Authenticator = Authenticator;
Authenticator.prototype.utils = {
  check: _check,
  decodeKey: decodeKey,
  encodeKey: encodeKey,
  keyuri: _keyuri,
  token: token
};

var index = new Authenticator();

module.exports = index;